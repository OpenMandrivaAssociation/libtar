From ad1840ad2fbf10f27aae4cf31c49d8631952a2a4 Mon Sep 17 00:00:00 2001
From: Kamil Dudka <kdudka@redhat.com>
Date: Thu, 10 Oct 2013 13:14:36 +0200
Subject: [PATCH] libtar-1.2.11-fix-memleak.patch rebased for 1.2.20

---
 lib/decode.c    |    2 +-
 lib/extract.c   |   94 +++++++++++++++++++++++++++++++++++++++++++------------
 lib/handle.c    |    1 +
 lib/wrapper.c   |   11 ++++++
 libtar/libtar.c |   30 +++++++++++------
 5 files changed, 106 insertions(+), 32 deletions(-)

diff --git a/lib/decode.c b/lib/decode.c
index c16ea2d..8a9abeb 100644
--- a/lib/decode.c
+++ b/lib/decode.c
@@ -29,7 +29,7 @@ th_get_pathname(TAR *t)
 	static TLS_THREAD char filename[MAXPATHLEN];
 
 	if (t->th_buf.gnu_longname)
-		return t->th_buf.gnu_longname;
+		return strdup(t->th_buf.gnu_longname);
 
 	if (t->th_buf.prefix[0] != '\0')
 	{
diff --git a/lib/extract.c b/lib/extract.c
index 36357e7..9bb9e00 100644
--- a/lib/extract.c
+++ b/lib/extract.c
@@ -36,9 +36,10 @@ tar_set_file_perms(TAR *t, char *realname)
 	uid_t uid;
 	gid_t gid;
 	struct utimbuf ut;
-	char *filename;
+	char *filename,*pn;
 
-	filename = (realname ? realname : th_get_pathname(t));
+	pn = th_get_pathname(t);
+	filename = (realname ? realname : pn);
 	mode = th_get_mode(t);
 	uid = th_get_uid(t);
 	gid = th_get_gid(t);
@@ -61,6 +62,7 @@ tar_set_file_perms(TAR *t, char *realname)
 				filename, uid, gid, strerror(errno));
 # endif
 #endif /* HAVE_LCHOWN */
+			free (pn);
 			return -1;
 		}
 
@@ -70,6 +72,7 @@ tar_set_file_perms(TAR *t, char *realname)
 #ifdef DEBUG
 		perror("utime()");
 #endif
+		free (pn);
 		return -1;
 	}
 
@@ -79,9 +82,11 @@ tar_set_file_perms(TAR *t, char *realname)
 #ifdef DEBUG
 		perror("chmod()");
 #endif
+		free (pn);
 		return -1;
 	}
 
+	free (pn);
 	return 0;
 }
 
@@ -161,7 +166,7 @@ tar_extract_regfile(TAR *t, char *realname)
 	int fdout;
 	int i, k;
 	char buf[T_BLOCKSIZE];
-	char *filename;
+	char *filename,*pn;
 
 #ifdef DEBUG
 	printf("==> tar_extract_regfile(t=0x%lx, realname=\"%s\")\n", t,
@@ -174,14 +179,18 @@ tar_extract_regfile(TAR *t, char *realname)
 		return -1;
 	}
 
-	filename = (realname ? realname : th_get_pathname(t));
+	pn = th_get_pathname(t);
+	filename = (realname ? realname : pn);
 	mode = th_get_mode(t);
 	size = th_get_size(t);
 	uid = th_get_uid(t);
 	gid = th_get_gid(t);
 
 	if (mkdirhier(dirname(filename)) == -1)
+	{
+		free (pn);
 		return -1;
+	}
 
 #ifdef DEBUG
 	printf("  ==> extracting: %s (mode %04o, uid %d, gid %d, %d bytes)\n",
@@ -197,6 +206,7 @@ tar_extract_regfile(TAR *t, char *realname)
 #ifdef DEBUG
 		perror("open()");
 #endif
+		free (pn);
 		return -1;
 	}
 
@@ -228,23 +238,30 @@ tar_extract_regfile(TAR *t, char *realname)
 		{
 			if (k != -1)
 				errno = EINVAL;
+			free (pn);
 			return -1;
 		}
 
 		/* write block to output file */
 		if (write(fdout, buf,
 			  ((i > T_BLOCKSIZE) ? T_BLOCKSIZE : i)) == -1)
+		{
+			free (pn);
 			return -1;
+		}
 	}
 
 	/* close output file */
 	if (close(fdout) == -1)
+	{
+		free (pn);
 		return -1;
+	}
 
 #ifdef DEBUG
 	printf("### done extracting %s\n", filename);
 #endif
-
+	free (pn);
 	return 0;
 }
 
@@ -283,7 +300,7 @@ tar_skip_regfile(TAR *t)
 int
 tar_extract_hardlink(TAR * t, char *realname)
 {
-	char *filename;
+	char *filename,*pn;
 	char *linktgt = NULL;
 	char *lnp;
 	libtar_hashptr_t hp;
@@ -294,9 +311,13 @@ tar_extract_hardlink(TAR * t, char *realname)
 		return -1;
 	}
 
-	filename = (realname ? realname : th_get_pathname(t));
+	pn = th_get_pathname(t);
+	filename = (realname ? realname : pn);
 	if (mkdirhier(dirname(filename)) == -1)
+	{
+		free (pn);
 		return -1;
+	}
 	libtar_hashptr_reset(&hp);
 	if (libtar_hash_getkey(t->h, &hp, th_get_linkname(t),
 			       (libtar_matchfunc_t)libtar_str_match) != 0)
@@ -315,9 +336,11 @@ tar_extract_hardlink(TAR * t, char *realname)
 #ifdef DEBUG
 		perror("link()");
 #endif
+		free (pn);
 		return -1;
 	}
 
+	free (pn);
 	return 0;
 }
 
@@ -326,7 +349,7 @@ tar_extract_hardlink(TAR * t, char *realname)
 int
 tar_extract_symlink(TAR *t, char *realname)
 {
-	char *filename;
+	char *filename,*pn;
 
 	if (!TH_ISSYM(t))
 	{
@@ -334,9 +357,13 @@ tar_extract_symlink(TAR *t, char *realname)
 		return -1;
 	}
 
-	filename = (realname ? realname : th_get_pathname(t));
+	pn = th_get_pathname(t);
+	filename = (realname ? realname : pn);
 	if (mkdirhier(dirname(filename)) == -1)
+	{
+		free (pn);
 		return -1;
+	}
 
 	if (unlink(filename) == -1 && errno != ENOENT)
 		return -1;
@@ -350,9 +377,11 @@ tar_extract_symlink(TAR *t, char *realname)
 #ifdef DEBUG
 		perror("symlink()");
 #endif
+		free (pn);
 		return -1;
 	}
 
+	free (pn);
 	return 0;
 }
 
@@ -363,7 +392,7 @@ tar_extract_chardev(TAR *t, char *realname)
 {
 	mode_t mode;
 	unsigned long devmaj, devmin;
-	char *filename;
+	char *filename,*pn;
 
 	if (!TH_ISCHR(t))
 	{
@@ -371,14 +400,18 @@ tar_extract_chardev(TAR *t, char *realname)
 		return -1;
 	}
 
-	filename = (realname ? realname : th_get_pathname(t));
+	pn = th_get_pathname(t);
+	filename = (realname ? realname : pn);
 	mode = th_get_mode(t);
 	devmaj = th_get_devmajor(t);
 	devmin = th_get_devminor(t);
 
 	if (mkdirhier(dirname(filename)) == -1)
+	{
+		free (pn);
 		return -1;
-
+	}
+	
 #ifdef DEBUG
 	printf("  ==> extracting: %s (character device %ld,%ld)\n",
 	       filename, devmaj, devmin);
@@ -389,9 +422,11 @@ tar_extract_chardev(TAR *t, char *realname)
 #ifdef DEBUG
 		perror("mknod()");
 #endif
+		free (pn);
 		return -1;
 	}
 
+	free (pn);
 	return 0;
 }
 
@@ -402,7 +437,7 @@ tar_extract_blockdev(TAR *t, char *realname)
 {
 	mode_t mode;
 	unsigned long devmaj, devmin;
-	char *filename;
+	char *filename,*pn;
 
 	if (!TH_ISBLK(t))
 	{
@@ -410,13 +445,17 @@ tar_extract_blockdev(TAR *t, char *realname)
 		return -1;
 	}
 
-	filename = (realname ? realname : th_get_pathname(t));
+	pn = th_get_pathname(t);
+	filename = (realname ? realname : pn);
 	mode = th_get_mode(t);
 	devmaj = th_get_devmajor(t);
 	devmin = th_get_devminor(t);
 
 	if (mkdirhier(dirname(filename)) == -1)
+	{
+		free (pn);
 		return -1;
+	}
 
 #ifdef DEBUG
 	printf("  ==> extracting: %s (block device %ld,%ld)\n",
@@ -428,9 +467,11 @@ tar_extract_blockdev(TAR *t, char *realname)
 #ifdef DEBUG
 		perror("mknod()");
 #endif
+		free (pn);
 		return -1;
 	}
 
+	free (pn);
 	return 0;
 }
 
@@ -440,19 +481,22 @@ int
 tar_extract_dir(TAR *t, char *realname)
 {
 	mode_t mode;
-	char *filename;
+	char *filename,*pn;
 
 	if (!TH_ISDIR(t))
 	{
 		errno = EINVAL;
 		return -1;
 	}
-
-	filename = (realname ? realname : th_get_pathname(t));
+	pn = th_get_pathname(t);
+	filename = (realname ? realname : pn);
 	mode = th_get_mode(t);
 
 	if (mkdirhier(dirname(filename)) == -1)
+	{
+		free (pn);
 		return -1;
+	}
 
 #ifdef DEBUG
 	printf("  ==> extracting: %s (mode %04o, directory)\n", filename,
@@ -467,6 +511,7 @@ tar_extract_dir(TAR *t, char *realname)
 #ifdef DEBUG
 				perror("chmod()");
 #endif
+				free (pn);
 				return -1;
 			}
 			else
@@ -474,6 +519,7 @@ tar_extract_dir(TAR *t, char *realname)
 #ifdef DEBUG
 				puts("  *** using existing directory");
 #endif
+				free (pn);
 				return 1;
 			}
 		}
@@ -482,10 +528,12 @@ tar_extract_dir(TAR *t, char *realname)
 #ifdef DEBUG
 			perror("mkdir()");
 #endif
+			free (pn);
 			return -1;
 		}
 	}
-
+	
+	free (pn);
 	return 0;
 }
 
@@ -495,7 +543,7 @@ int
 tar_extract_fifo(TAR *t, char *realname)
 {
 	mode_t mode;
-	char *filename;
+	char *filename,*pn;
 
 	if (!TH_ISFIFO(t))
 	{
@@ -503,11 +551,15 @@ tar_extract_fifo(TAR *t, char *realname)
 		return -1;
 	}
 
-	filename = (realname ? realname : th_get_pathname(t));
+	pn = th_get_pathname(t);
+	filename = (realname ? realname : pn);
 	mode = th_get_mode(t);
 
 	if (mkdirhier(dirname(filename)) == -1)
+	{
+		free (pn);
 		return -1;
+	}
 
 #ifdef DEBUG
 	printf("  ==> extracting: %s (fifo)\n", filename);
@@ -517,9 +569,11 @@ tar_extract_fifo(TAR *t, char *realname)
 #ifdef DEBUG
 		perror("mkfifo()");
 #endif
+		free (pn);
 		return -1;
 	}
 
+	free (pn);
 	return 0;
 }
 
diff --git a/lib/handle.c b/lib/handle.c
index 33a262c..002d23c 100644
--- a/lib/handle.c
+++ b/lib/handle.c
@@ -82,6 +82,7 @@ tar_open(TAR **t, const char *pathname, tartype_t *type,
 	(*t)->fd = (*((*t)->type->openfunc))(pathname, oflags, mode);
 	if ((*t)->fd == -1)
 	{
+		libtar_hash_free((*t)->h, NULL);
 		free(*t);
 		return -1;
 	}
diff --git a/lib/wrapper.c b/lib/wrapper.c
index 44cc435..46fabdb 100644
--- a/lib/wrapper.c
+++ b/lib/wrapper.c
@@ -36,7 +36,10 @@ tar_extract_glob(TAR *t, char *globname, char *prefix)
 		if (fnmatch(globname, filename, FNM_PATHNAME | FNM_PERIOD))
 		{
 			if (TH_ISREG(t) && tar_skip_regfile(t))
+			{
+				free (filename);
 				return -1;
+			}
 			continue;
 		}
 		if (t->options & TAR_VERBOSE)
@@ -46,7 +49,11 @@ tar_extract_glob(TAR *t, char *globname, char *prefix)
 		else
 			strlcpy(buf, filename, sizeof(buf));
 		if (tar_extract_file(t, buf) != 0)
+    {
+      free(filename);
 			return -1;
+    }
+    free(filename);
 	}
 
 	return (i == 1 ? 0 : -1);
@@ -82,7 +89,11 @@ tar_extract_all(TAR *t, char *prefix)
 		       "\"%s\")\n", buf);
 #endif
 		if (tar_extract_file(t, buf) != 0)
+    {
+      free(filename);
 			return -1;
+    }
+    free(filename);
 	}
 
 	return (i == 1 ? 0 : -1);
diff --git a/libtar/libtar.c b/libtar/libtar.c
index 9fa92b2..12984ee 100644
--- a/libtar/libtar.c
+++ b/libtar/libtar.c
@@ -249,7 +249,9 @@ extract(char *tarfile, char *rootdir)
 #endif
 	if (tar_extract_all(t, rootdir) != 0)
 	{
+		
 		fprintf(stderr, "tar_extract_all(): %s\n", strerror(errno));
+		tar_close(t);
 		return -1;
 	}
 
@@ -267,12 +269,13 @@ extract(char *tarfile, char *rootdir)
 
 
 void
-usage()
+usage(void *rootdir)
 {
 	printf("Usage: %s [-C rootdir] [-g] [-z] -x|-t filename.tar\n",
 	       progname);
 	printf("       %s [-C rootdir] [-g] [-z] -c filename.tar ...\n",
 	       progname);
+	free(rootdir);
 	exit(-1);
 }
 
@@ -289,6 +292,7 @@ main(int argc, char *argv[])
 	int c;
 	int mode = 0;
 	libtar_list_t *l;
+	int return_code = -2;
 
 	progname = basename(argv[0]);
 
@@ -310,17 +314,17 @@ main(int argc, char *argv[])
 			break;
 		case 'c':
 			if (mode)
-				usage();
+				usage(rootdir);
 			mode = MODE_CREATE;
 			break;
 		case 'x':
 			if (mode)
-				usage();
+				usage(rootdir);
 			mode = MODE_EXTRACT;
 			break;
 		case 't':
 			if (mode)
-				usage();
+				usage(rootdir);
 			mode = MODE_LIST;
 			break;
 #ifdef HAVE_LIBZ
@@ -329,7 +333,7 @@ main(int argc, char *argv[])
 			break;
 #endif /* HAVE_LIBZ */
 		default:
-			usage();
+			usage(rootdir);
 		}
 
 	if (!mode || ((argc - optind) < (mode == MODE_CREATE ? 2 : 1)))
@@ -338,7 +342,7 @@ main(int argc, char *argv[])
 		printf("argc - optind == %d\tmode == %d\n", argc - optind,
 		       mode);
 #endif
-		usage();
+		usage(rootdir);
 	}
 
 #ifdef DEBUG
@@ -348,21 +352,25 @@ main(int argc, char *argv[])
 	switch (mode)
 	{
 	case MODE_EXTRACT:
-		return extract(argv[optind], rootdir);
+		return_code = extract(argv[optind], rootdir);
+		break;
 	case MODE_CREATE:
 		tarfile = argv[optind];
 		l = libtar_list_new(LIST_QUEUE, NULL);
 		for (c = optind + 1; c < argc; c++)
 			libtar_list_add(l, argv[c]);
-		return create(tarfile, rootdir, l);
+		return_code =  create(tarfile, rootdir, l);
+		libtar_list_free (l, NULL);
+		break;
 	case MODE_LIST:
-		return list(argv[optind]);
+		return_code = list(argv[optind]);
+		break;
 	default:
 		break;
 	}
 
-	/* NOTREACHED */
-	return -2;
+	free(rootdir);
+	return return_code;
 }
 
 
-- 
1.7.1

